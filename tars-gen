#!/usr/bin/env php
<?php

class TarsGenerator
{
    private const TARS_DIR = 'tars';

    /**
     * @var string
     */
    private $jar;

    /**
     * @var string
     */
    private $java;

    /**
     * @var string
     */
    private $projectPath;

    /**
     * @var string
     */
    private $sourcePath;

    /**
     * @var string
     */
    private $namespace;

    /**
     * TarsGenerator constructor.
     */
    public function __construct()
    {
        $jars = glob(__DIR__ . '/dist/tars-generator-*.jar');
        if (!$jars) {
            throw new \RuntimeException("Cannot find tars-generator-*.jar in " . __DIR__ . '/dist');
        }
        $this->jar = end($jars);
        $this->java = exec("command -v java") ?: "java";
        $this->namespace = '';
        $this->sourcePath = 'src';
    }

    public function run(array $args)
    {
        if (!empty($args)) {
            passthru(sprintf("%s -jar %s %s", $this->java, escapeshellarg($this->jar),
                implode(" ", array_map('escapeshellarg', $args))));
            return;
        }
        if (!$this->projectPath) {
            $this->projectPath = getcwd();
        }
        $this->generate($this->loadConfig());
    }

    private function loadConfig()
    {
        if (!file_exists($this->projectPath . '/composer.json')) {
            die('No composer.json find in current directory');
        }
        $composerJson = json_decode(file_get_contents($this->projectPath . '/composer.json'), true);

        if (!empty($composerJson['autoload']['psr-4'])) {
            $autoload = $composerJson['autoload']['psr-4'];
            $this->namespace = array_keys($autoload)[0];
            $this->sourcePath = $autoload[$this->namespace];
        }
        $options = $composerJson['extra']['tars']['generator'] ?? [];
        $configJson = sprintf('%s/%s/config.json', $this->projectPath, self::TARS_DIR);
        if (file_exists($configJson)) {
            if (!empty($options)) {
                throw new \RuntimeException("tars/config.json does exist, please remove extra.tars.generator from composer.json");
            }
            return json_decode(file_get_contents($configJson), true);
        }
        return $options;
    }

    private function generate(array $options): void
    {
        foreach (['client', 'servant'] as $type) {
            if (isset($options[$type])) {
                $config = $options[$type];
                if (!isset($config[0])) {
                    $config = [$config];
                }
            } else {
                $config = [];
                if ($type === 'servant') {
                    $config[] = [
                        'tars_path' => 'tars/servant'
                    ];
                } else {
                    foreach (glob($this->projectPath . '/tars/*.tars') as $file) {
                        $config[] = [
                            'tars_path' => basename($file)
                        ];
                    }
                }
            }
            foreach ($config as $i => $item) {
                $argOptions = array_merge([
                    'flat' => true,
                    'namespace' => $this->namespace . $type,
                    "output" => $this->sourcePath . DIRECTORY_SEPARATOR . $type,
                ], $item);
                if (!isset($argOptions['tars_path'])) {
                    throw new \InvalidArgumentException("tars_path is required");
                }
                if (!file_exists($argOptions['tars_path'])) {
                    if (isset($item['tars_path']) && $item['tars_path'] !== 'tars/servant') {
                        throw new \InvalidArgumentException("tars file '{$item['tars_path']}' not found");
                    }
                    continue;
                }

                $cmd = sprintf("%s -jar %s %s", $this->java, escapeshellarg($this->jar),
                    implode(" ", $this->buildCmdOptions($type, $argOptions)));
                $this->log("exec $cmd");
                system($cmd);
            }
        }
    }

    private function log($message): void
    {
        error_log(date('[Y-m-d H:i:s] ') . $message);
    }

    private function buildCmdOptions(string $type, array $options): array
    {
        $args = [];
        if ($type === 'client') {
            $args[] = '--client';
        }
        $args[] = '-t';
        $args[] = escapeshellarg($options['tars_path']);
        if (isset($options['flat'])) {
            $args[] = '-f';
        }
        if (isset($options['namespace'])) {
            $args[] = '-n';
            $args[] = escapeshellarg($options['namespace']);
        }
        if (isset($options['output'])) {
            $args[] = '-o';
            $args[] = escapeshellarg($options['output']);
        }
        if (!empty($options['servants'])) {
            foreach ($options['servants'] as $name => $servant) {
                $args[] = '-s';
                $args[] = escapeshellarg($name . '=' . $servant);
            }
        }
        return $args;
    }
}

(new TarsGenerator())->run(array_slice($argv, 1));